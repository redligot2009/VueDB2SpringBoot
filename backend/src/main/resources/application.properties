# Application name used in logs and actuator (if enabled)
spring.application.name=backend

# --- Default profile (DB2 for local development) ---
spring.profiles.active=db2

# Global configuration (fallback - will be overridden by db2 profile)
# These settings are only used if profile-specific settings fail to load
spring.datasource.url=jdbc:h2:mem:photodb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update

# DB2 connection (override via env vars in Docker or host)
spring.datasource.url=${DB_URL:jdbc:db2://db2:50000/PHOTODB}
spring.datasource.username=${DB_USER:db2inst1}
spring.datasource.password=${DB_PASS:passw0rd}
spring.datasource.driverClassName=com.ibm.db2.jcc.DB2Driver

# Use Hibernate DB2 dialect; keep schema auto update for dev
spring.jpa.database-platform=org.hibernate.dialect.DB2Dialect
spring.jpa.hibernate.ddl-auto=update

# DB2-specific JPA properties
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.DB2Dialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# DB2 connection pool settings for Docker startup delays
spring.datasource.hikari.connection-timeout=300000
spring.datasource.hikari.maximum-pool-size=3
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.initialization-fail-timeout=900000
spring.datasource.hikari.connection-test-query=SELECT 1 FROM SYSIBM.SYSDUMMY1
spring.datasource.hikari.validation-timeout=60000
spring.datasource.hikari.leak-detection-threshold=60000
spring.datasource.hikari.max-lifetime=1800000

# Flyway configuration - temporarily enabled for schema migration
spring.flyway.enabled=true
spring.autoconfigure.exclude=
# DB2-specific Flyway configuration
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.validate-on-migrate=true
spring.flyway.clean-disabled=true
spring.flyway.baseline-version=0
spring.flyway.baseline-description=Initial baseline

# Handle existing database gracefully
spring.flyway.baseline-validate-on-migrate=false
# Repair checksum mismatches (needed when migration files change)
spring.flyway.repair-on-migrate=true
# Ignore checksum mismatches during development (use with caution in production)
spring.flyway.ignore-migration-patterns=*:missing,*:future
# Note: Using baseline-version=1 to reset migration history
# DB2 connection settings for Flyway
spring.flyway.connect-retries=30
spring.flyway.connect-retries-interval=15
# Wait for database to be ready before running migrations
spring.flyway.init-sql=SELECT 1 FROM SYSIBM.SYSDUMMY1

# JWT Configuration
# Read secret from environment variable - no fallback for security
app.jwtSecret=${JWT_SECRET}
app.jwtExpirationInMs=${JWT_EXPIRATION:86400000}

# Multipart Configuration
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=100MB
spring.servlet.multipart.file-size-threshold=2KB

# OpenAPI/Swagger Configuration
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.doc-expansion=none
springdoc.swagger-ui.display-request-duration=true
springdoc.swagger-ui.filter=true

# Production configuration - Hibernate handles schema
# Flyway is completely disabled

# Production JPA configuration (when SPRING_PROFILES_ACTIVE=production)
spring.jpa.hibernate.ddl-auto=${JPA_DDL_AUTO:update}
spring.jpa.show-sql=${JPA_SHOW_SQL:true}
spring.jpa.properties.hibernate.format_sql=${JPA_FORMAT_SQL:true}
